import logging
import re

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from app.api.dao import UserDAO, OrderDAO
from app.bot.keyboards.kbs import app_keyboard
from app.bot.utils import *
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext

user_router = Router()


def format_russian_phone_number(phone):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    cleaned = re.sub(r'\D', '', phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏–º
    if len(cleaned) == 10:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        return f'+7{cleaned}'
    elif len(cleaned) == 11 and cleaned.startswith('7'):
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        return f'+{cleaned}'
    elif len(cleaned) == 11 and cleaned.startswith('8'):
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
        return f'+7{cleaned[1:]}'
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return None


class Form(state.StatesGroup):
    number_user = state.State()
    number_user_not_ord = state.State()


@user_router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    """
    user = await UserDAO.find_one_or_none(telegram_id=message.from_user.id)

    if not user:
        await UserDAO.add(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            username=message.from_user.username
        )

    await greet_user(message)


@user_router.message(F.text == 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd_main_menu(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
    """
    await main_mail(message)


@user_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è')
async def cmd_settings(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
    """
    await settings(message)


@user_router.callback_query(F.data == "about_us")
async def about_us(callback: CallbackQuery):

    await get_about_us_text(callback)


@user_router.callback_query(F.data == "new_order")
async def make_order(callback: CallbackQuery, state: FSMContext):
    user = await UserDAO.find_one_or_none(telegram_id=callback.from_user.id)
    logging.info(user.number if user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    if user and user.number:
        cart = await UserDAO.get_cart(callback.from_user.id)
        await OrderDAO.add(
            user_id=callback.from_user.id,
            completed=False,
            client_name=callback.from_user.first_name,
            products_list=cart,
        )
        await UserDAO.clear_cart(callback.from_user.id)
        await callback.message.edit_text(new_order())
    else:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üî¢")
        await state.set_state(Form.number_user)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üî¢")


@user_router.message(Form.number_user)
async def get_phone_number(message: Message, state: FSMContext):
    await state.update_data(number_user=message.text)
    data = await state.get_data()
    logging.info(data)
    number = format_russian_phone_number(data["number_user"])  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
    if number:
        await UserDAO.change_number(message.from_user.id, number)
        await message.answer("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑!")
        await state.clear()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üîÑ")


@user_router.callback_query(F.data == "canc_order")
async def cancel_order(callback: CallbackQuery):
    await callback.edit_message_text(canc_order())


@user_router.callback_query(F.data == "change_number")
async def make_order(callback: CallbackQuery, state: FSMContext):
    user = await UserDAO.find_one_or_none(telegram_id=callback.from_user.id)
    logging.info(user.number if user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üî¢")
    await state.set_state(Form.number_user_not_ord)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üî¢")


@user_router.message(Form.number_user_not_ord)
async def get_phone_number(message: Message, state: FSMContext):
    await state.update_data(number_user_not_ord=message.text)
    data = await state.get_data()

    number = format_russian_phone_number(data["number_user_not_ord"])  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
    if number:
        await UserDAO.change_number(message.from_user.id, number)
        await message.answer("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üìû ")
        await state.clear()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üîÑ")